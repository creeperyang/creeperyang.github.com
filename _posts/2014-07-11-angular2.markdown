---
layout: article
comments: true
title: AngularJs的模板与指令
category: tech
tags: [AngularJs]
description: <p>wait...</p>
---

##模板

通过使用模板，我们可以把model和controller中的数据组装起来呈现给浏览器，还可以通过数据绑定，实时更新视图，让我们的页面变成动态的。

###模板中可以使用的东西包括以下4种：

* 指令(directive)。ng提供的或者自定义的标签和属性，用来增强HTML。
* 标记(markup)。即双大括号{{}}，可将数据单向绑定到HTML中。
* 过滤器(filter)。用来格式化输出数据。
* 表单控制。用来增强表单的验证功能。

其中，指令无疑是使用量最大的，ng内置了很多指令用来控制模板，如ng-repeat，ng-class，也有很多指令来帮你完成业务逻辑，如ng-controller，ng-model。过滤器通常是伴随标记来使用的，将你model中的数据格式化为需要的格式。表单的控制功能主要涉及到数据验证以及表单控件的增强。

###表达式

在这里有必要说明一下表达式的概念，毕竟我们模板中大部分使用的都是变量。ng中的表达式与javascript表达式**类似但是不可以划等号**，它是ng自己定义的一套模式。

* 表达式可以作为指令的值，如`ng-modle="people.name"、ng-click="showMe()"`，看起来是如此像字符串，故而也叫**字符串表达式**。
* 可以在标记中使用表达式，如{{1+2}}，或者与过滤器一起使用{{1+2 | currency}}。

在框架内部，字符串不会简单的使用eval()来执行，而是有一个专门的$parse服务来处理。在ng表达式中**不可以使用循环语句、判断语句**，事实上在模板中使用复杂的表达式也是一个不推荐的做法，这样视图与逻辑就混杂在一起了。

###过滤器

所谓过滤器是指对输出的内容进行格式化，如格式化为美元、日期等。框架自己提供一些过滤器，如排序、字符串内容筛选。我们也可以自定义过滤器。

过滤器在{{}}中使用，表达式后用|隔开使用。拿日期过滤器举例，方式如下：

```javascript
$scope.nowTime = new Date().valueOf();
{{nowTime | date : 'yyyy-MM-dd HH:mm:ss'}}
```

自定义过滤器：

```javascript
app.filter('typeFilter',function(){
    var f = function(input){
        return input == '1' ? '单选题' : '多选题';
    }
    return f;
});
// 使用：
<b>[{{question.type | typeFilter}}]{{question.name}}</b>({{question.fraction}}分)
```

##指令

指令是angular为HTML补充的语法扩展，用于增强HTML的表现力。像我们之前使用的ng-controller、ng-model等都属于指令。你也可以自定义指令。ng内部包含了一个强大的DOM解析引擎，所以这些新的标签或是标签属性可以像使用原生HTML那样很好的工作。

###样式相关指令

既然模板就是普通的HTML，那首先看看常用的样式控制指令。

1.  ngClass
    
    ng-class用来给元素绑定类名，其表达式的返回值可以是以下三种：- 类名字符串，可以用空格分割多个类名，如"redtext boldtext"；- 类名数组，数组中的每一项都会层叠起来生效；- 一个名值对应的object，其键值为类名，值为boolean类型，当值为true时，该类会被加在元素上。
    
    例子：

    <iframe width="100%" height="300" src="http://jsfiddle.net/creeper/0cn2mzwz/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

2.  ngStyle
 
    ng-style用来绑定元素的css样式，其表达式的返回值为一个js对象，键为css样式名，值为该样式对应的合法取值。用法比较简单：
 
    例子：

    ```html
    <div ng-style="{color:'red'}">ng-style测试</div>
    <div ng-style="style">ng-style测试</div>
    $scope.style = {color:'red'};
    ```

3.  ngShow/ngHide

    控制显隐。表达式返回值应该是boolean。

###表单控件功能相关的

* ng-checked控制radio和checkbox的选中状态
* ng-selected控制下拉框的选中状态
* ng-disabled控制失效状态
* ng-multiple控制多选
* ng-readonly控制只读状态

以上指令的取值均为boolean类型，当值为true时相关状态生效，道理比较简单就不多做解释。
 
**注意：** 上面的这些只是单向绑定，即只是从数据到模板，不能反作用于数据。要双向绑定，还是要使用 ng-model 。

###事件绑定相关
 
`ng-change``ng-dblclick``ng-mousedown``ng-mouseenter``ng-mouseleave``ng-mousemove``ng-mouseover``ng-mouseup``ng-submit`
 
事件绑定指令的取值为函数，并且需要加上括号，例如：

```html
<select ng-change="change($event)"></select>
$scope.change = function($event){
     alert($event.target);
     //……………………
}
```
 
###特殊的ng-src和ng-href
 
我们使用ng-src指令，这样在路径被正确得到之前就不会显示找不到图片。同理，`<a>`标签的href属性也需要换成ng-href，这样页面上就不会先出现一个地址错误的链接。
 
ng中有一个与{{}}等同的指令:ng-bind，同样用于单向绑定，在页面刚加载的时候就不会显示出对用户无用的数据。

###控制相关的指令

如ngRepeat循环输出
    
```html
<li ng-repeat="o in question.options">
    <b>{{$index+1}}.</b>
    <input type="text" ng-model="o.content" value="o.content" />
    <a href="javascript:void(0);" ng-click="delOption($index)">删除</a>
</li>
```
